// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "searchEngine/models"
)

// Resource is an autogenerated mock type for the Resource type
type Resource struct {
	mock.Mock
}

// GetResource provides a mock function with given fields: ctx, id
func (_m *Resource) GetResource(ctx context.Context, id string) (models.Resource, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Resource
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Resource); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Resource)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResources provides a mock function with given fields: ctx, keyword
func (_m *Resource) GetResources(ctx context.Context, keyword string) ([]models.SearchEngineResult, error) {
	ret := _m.Called(ctx, keyword)

	var r0 []models.SearchEngineResult
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.SearchEngineResult); ok {
		r0 = rf(ctx, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SearchEngineResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNewResource provides a mock function with given fields: ctx, reqResource, fileName, filePath
func (_m *Resource) InsertNewResource(ctx context.Context, reqResource models.ReqResource, fileName string, filePath string) error {
	ret := _m.Called(ctx, reqResource, fileName, filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ReqResource, string, string) error); ok {
		r0 = rf(ctx, reqResource, fileName, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewResource interface {
	mock.TestingT
	Cleanup(func())
}

// NewResource creates a new instance of Resource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResource(t mockConstructorTestingTNewResource) *Resource {
	mock := &Resource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
